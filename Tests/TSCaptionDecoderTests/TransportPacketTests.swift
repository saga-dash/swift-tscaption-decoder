// 
//  TransportPacketTests.swift
//  TSCaptionDecoderTests
//
//  Created by saga-dash on 2018/07/10.
//


import XCTest
import Foundation
@testable import CaptionDecoderLib

extension TransportPacketTests {
    static var allTests : [(String, (TransportPacketTests) -> () throws -> Void)] {
        return [
            ("testPAT", testPAT),
        ]
    }
}

final class TransportPacketTests: XCTestCase {
    override func setUp() {
    }
    func testPAT() throws {
        let bytes: [UInt8] = [
            0x47, 0x60, 0x0, 0x19, 0x0, 0x0, 0xb0, 0x11, 0x40, 0x31, 0xc3, 0x0, 0x0, 0x0, 0x0, 0xe0,
            0x10, 0x0, 0x67, 0xe1, 0xf0, 0xfa, 0x74, 0xbb, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        ]
        let data = Data(bytes: bytes)
        let header = TransportPacket(data)
        print(header)
        XCTAssertTrue(header.syncByte == 0x47)
    }
    func testDRCS() throws {
        let bytes: [UInt8] = [
            0x47, 0x41, 0x30, 0x10, 0x00, 0x00, 0x01, 0xbd, 0x01, 0xff, 0x80, 0x81, 0x17, 0x21, 0x28, 0x4f, 0xfb, 0xc9, 0x8e, 0x43, 0x43, 0x49, 0x53, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xf0, 0x04, 0x00, 0x00, 0x01, 0xdb, 0x3f, 0x00, 0x01, 0xd7, 0x1f, 0x20, 0x00, 0x00, 0x01, 0x0c, 0x1f, 0x30, 0x00, 0x01, 0x4c, 0x01, 0x41, 0x21, 0x01, 0x01, 0x02, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x00, 0x0f, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0xf0, 0x0f, 0x00, 0x0f, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0xff, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0xff, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x0f, 0xff, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x0f, 0xff, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0xff, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0xff, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0x0f, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0x0f, 0xf0, 0xf0, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0xf0, 0x0f, 0x00, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x0f, 0xf0, 0x0f, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x20, 0x00, 0x00, 0x7b, 0x9b, 0x37, 0x20, 0x53, 0x9b, 0x36, 0x32, 0x30, 0x3b, 0x34, 0x38, 0x30, 0x20, 0x56, 0x9b, 0x31, 0x37, 0x30, 0x3b, 0x33, 0x30, 0x20, 0x5f, 0x9b, 0x34, 0x20, 0x58, 0x9b, 0x32, 0x34, 0x20, 0x59, 0x9b, 0x33, 0x36, 0x3b, 0x33, 0x36, 0x20, 0x57, 0x9b, 0x38, 0x20, 0x6e, 0x9b, 0x31, 0x3b, 0x30, 0x30, 0x30, 0x30, 0x20, 0x63, 0x88, 0x1c, 0x4c, 0x42, 0x1d, 0x61, 0x8a, 0x90, 0x6e, 0x90, 0x20, 0x41, 0x90, 0x72, 0x90, 0x20, 0x40, 0x86, 0x90, 0x20, 0x44, 0x90, 0x51, 0x46, 0x62, 0x49, 0x74, 0xcb, 0xcf, 0x1c, 0x46, 0x43, 0x88, 0xb7, 0xe3, 0xab, 0xb5, 0xde, 0x89, 0x1c, 0x47, 0x43, 0x8a, 0xaa, 0x3c, 0x61, 0x1b, 0x2b, 0x20, 0x41, 0x1b, 0x7c, 0xa1, 0x4d, 0x4d, 0x1b, 0x7d, 0xce, 0x30, 0x64, 0x39, 0x7c, 0xac, 0x47, 0x3c, 0xe1, 0xe9, 0xec, 0x7c, 0x21, 0xa4, 0x13
        ]
        let data = Data(bytes: bytes)
        let header = TransportPacket(data)
        printHexDumpForBytes(data)
        print(header)
        guard let caption = Caption(data) else {
            XCTFail()
            return
        }
        // ARIB STD-B24 第一編 第 3 部 表 9-2 字幕データとデータグループ識別の対応
        // 字幕管理: 0x00 or 0x20
        if caption.dataGroupId == 0x00 || caption.dataGroupId == 0x20 {
            XCTFail()
            return
        }
        print(caption.pesHeader)
        //printHexDumpForBytes(bytes: caption.payload)
        print(caption)
        let _ = caption.dataUnit.map({(dataUnit: DataUnit) in
            printHexDumpForBytes(bytes: dataUnit.payload)
            // ARIB STD-B24 第一編 第 3 部 表 9-12 データユニットの種類
            // 本文: 0x20, 1バイト DRCS: 0x30, 2バイト DRCS: 0x31
            switch dataUnit.dataUnitParameter {
            case 0x20:
                let result = ARIB8charDecode(dataUnit)
                print(result)
            case 0x30, 0x31:
                let drcs = DRCS(dataUnit.payload)
                print(drcs)
            default:
                print("dataUnit.dataUnitParameter: \(dataUnit.dataUnitParameter)")
                XCTFail()
            }
        })
    }
}
